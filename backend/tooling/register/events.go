package register

import (
	"errors"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"spyal/tooling/utils"
)

const dirPerm = 0o755 // replaces magic number 0755


type templateData struct {
	EnumNames []string
	EventMap  map[string]string
}

func GetEventTypes(dir string) ([]string, error) {
	c := cases.Title(language.English)

	files, err := utils.ListAllFiles(dir)
	if err != nil {
		return nil, err
	}

	suffix := c.String(strings.TrimSuffix(dir, "s"))
	pattern := `^type ([A-Za-z0-9_]+` + suffix + `) struct {`

	var events []string
	for _, path := range files {
		constructor, err := utils.FindMatchingLine(path, pattern)
		if err != nil || constructor == "" {
			continue
		}
		events = append(events, constructor)
	}

	return events, nil
}

// gosec:disable
func GenerateEventTypes(dir string, events []string) error {
	if len(events) == 0 {
		return errors.New("no events provided")
	}

	// Prepare data
	c := cases.Title(language.English)
	var enumNames []string
	mappings := make(map[string]string)
	for _, e := range events {
		name := c.String(e)
		enumNames = append(enumNames, name)
		mappings[name] = e
	}
	data := templateData{EnumNames: enumNames, EventMap: mappings}

	// Generate Go registry
	if err := generateGoRegistry(dir, data); err != nil {
		return err
	}

	// Generate TS types
	if err := generateTSTypes(data); err != nil {
		return err
	}

	return nil
}

func generateGoRegistry(dir string, data templateData) error {
	goFile := filepath.Join(dir, "registry.go")
	f, err := os.Create(goFile)
	if err != nil {
		return err
	}
	defer f.Close()

	goTmpl := GeneratedCodeMsg + `
package events

import (
	"spyal/contracts"
)

// constants
const (
{{- range .EnumNames }}
    {{ . }} contracts.EventName = iota
{{- end }}
    EventNameCount
)

// NewEvent returns the constructor of the event by its EventName
func NewEvent(name contracts.EventName, data map[string]any) contracts.Event {
	switch name {
{{- range $key, $val := .EventMap }}
	case {{ $key }}:
		return New{{ $val }}(data)
{{- end }}
	default:
		return nil
	}
}
`
	t := template.Must(template.New("registry").Parse(goTmpl))
	return t.Execute(f, data)
}

func generateTSTypes(data templateData) error {
	tsFile := filepath.Join("..", "frontend", "src", "ts", "poke", "types.ts")
	if err := os.MkdirAll(filepath.Dir(tsFile), dirPerm); err != nil {
		return err
	}

	tf, err := os.Create(tsFile)
	if err != nil {
		return err
	}
	defer tf.Close()

	tsTmpl := `// Code generated by tools/register.go DO NOT EDIT.

export enum EventName {
{{- range $index, $name := .EnumNames }}
    {{ $name }} = {{ $index }},
{{- end }}
    EventNameCount = {{ len .EnumNames }}
}

export type EventData = { [key: string]: any };

export interface Event {
    name: EventName;
    data: EventData;
}
`
	tt := template.Must(template.New("types").Parse(tsTmpl))
	return tt.Execute(tf, data)
}
